# Syscall in Python


## What is a Syscall ?

Syscall are the main (and only ?) way for programm to communicate with the Operating System. Program
usually run in userspace and are limited in the action they can do. For safety reason many low level
actions are handled by the kernel. As soon as you want to do something meaningful (print something to stdout, 
read something from a hard drive, send somethign on the network, etc) you have to syscall and let the kernel do it
for you.

## How to do a syscall in Python ? (the easy way)

As for [everything in python](https://xkcd.com/353/), you can use the standard libary for most usecase.
Let's say you want to use the [open syscall](https://man7.org/linux/man-pages/man2/open.2.html) to open a file,
you can do it via the `os` module:

```
import os

fd = os.open(path="abc.txt", flags=os.O_WRONLY, mode=0o755)
```

As you can see the argument of the [os.open](https://docs.python.org/3/library/os.html#os.open) function match the 
documentation for the syscall, with the little help of a few varialike like `O_WRONLY` to avoid using plain integers
for flag. So the os module offers a nice interface over syscall (and also a [more or less]() unified interface between Windows and Linux) 
but what can we do if we want to perform a syscall that doesn't have a clean interface in the os module ? Lets look at how the
`os.open` funciton is implemented !


## We need to go deeper

If we take a look at the source code of `os.open` with Pycharm, it will show us a `posix.py` file but 
it's actually just a stub file that Pycharm create and uses for its IDE capabilities, no luck here.

```
def open(*args, **kwargs): # real signature unknown
    """
    Open a file for low level IO.  Returns a file descriptor (integer).
    
    If dir_fd is not None, it should be a file descriptor open to a directory,
      and path should be relative; path will then be relative to that directory.
    dir_fd may not be implemented on your platform.
      If it is unavailable, using it will raise a NotImplementedError.
    """
    pass
```

The real implementation of `os.open` uis a bit harder to find as it's actually implemented in C
as part of the python laguage. We can find the implemetation in [this file](https://github.com/python/cpython/blob/fda901a1ff94ea6cc338b74928acdbc5ee165ed7/Modules/posixmodule.c#L10552)
and as you can see, the funciton contains both low level integration with syscalls and handle logic different for different operating system.
<details>
 Here we go :nerd

```
/*[clinic input]
os.open -> int
    path: path_t
    flags: int
    mode: int = 0o777
    *
    dir_fd: dir_fd(requires='openat') = None

# "open(path, flags, mode=0o777, *, dir_fd=None)\n\n\

Open a file for low level IO.  Returns a file descriptor (integer).

If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
dir_fd may not be implemented on your platform.
  If it is unavailable, using it will raise a NotImplementedError.
[clinic start generated code]*/

static int
os_open_impl(PyObject *module, path_t *path, int flags, int mode, int dir_fd)
/*[clinic end generated code: output=abc7227888c8bc73 input=ad8623b29acd2934]*/
{
    int fd;
    int async_err = 0;
#ifdef HAVE_OPENAT
    int openat_unavailable = 0;
#endif

#ifdef O_CLOEXEC
    int *atomic_flag_works = &_Py_open_cloexec_works;
#elif !defined(MS_WINDOWS)
    int *atomic_flag_works = NULL;
#endif

#ifdef MS_WINDOWS
    flags |= O_NOINHERIT;
#elif defined(O_CLOEXEC)
    flags |= O_CLOEXEC;
#endif

    if (PySys_Audit("open", "OOi", path->object, Py_None, flags) < 0) {
        return -1;
    }

    _Py_BEGIN_SUPPRESS_IPH
    do {
        Py_BEGIN_ALLOW_THREADS
#ifdef MS_WINDOWS
        fd = _wopen(path->wide, flags, mode);
#else
#ifdef HAVE_OPENAT
        if (dir_fd != DEFAULT_DIR_FD) {
            if (HAVE_OPENAT_RUNTIME) {
                fd = openat(dir_fd, path->narrow, flags, mode);

            } else {
                openat_unavailable = 1;
                fd = -1;
            }
        } else
#endif /* HAVE_OPENAT */
            fd = open(path->narrow, flags, mode);
#endif /* !MS_WINDOWS */
        Py_END_ALLOW_THREADS
    } while (fd < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
    _Py_END_SUPPRESS_IPH

#ifdef HAVE_OPENAT
    if (openat_unavailable) {
        argument_unavailable_error(NULL, "dir_fd");
        return -1;
    }
#endif

    if (fd < 0) {
        if (!async_err)
            PyErr_SetFromErrnoWithFilenameObject(PyExc_OSError, path->object);
        return -1;
    }

#ifndef MS_WINDOWS
    if (_Py_set_inheritable(fd, 0, atomic_flag_works) < 0) {
        close(fd);
        return -1;
    }
#endif

    return fd;
}
```
</details>
    
## The usecase: Atomic file Renaming

But then is it possible to perform an arbitrary syscalls in Python ? That's the the problem I encountered when trying to use `os.rename`
(which will use the `rename` syscall under the hood) to ensure only one process is able to write a file/folder in a consistent way.
The idea is pretty simple: we basically write the file/folder in a temporary location, and then rename it to the destination file/folder
when we finished writing. As this code was running in the context of a background job (with eventual retry) I wanted to make sure only
one renaming would succeed (in case where we end up with the same task executing twice in parralel).
This ensure that any process interruption will not leave with a file half written or a folder containing half of the file.

The problem is that this rename operation was not behaving how I expected: when using the [rename syscall](https://man7.org/linux/man-pages/man2/rename.2.html) 
(which is what happend when using [os.rename](https://docs.python.org/3/library/os.html#os.rename) in Python), it has different behavior when using it with file of folder:
With files, if destindation is present, it will overwrite the result (in an atomic way).
With folder, if destination is an empty folder, it will overwrite the result
With folder, if destination is a non-empty folder, it will raises a OSError !

In our case we want only one operation to succeed, so it will work correctly with folder but
it's not possible to to have an atomic rename for files using the `os.rename` which is exclusive, meaning it will not overwrite
the destination if it exists !

## The hero: renameat2

Fortunately, there's a solution that landed in the Linux kernel 3.15, the `renameat2` syscall !
Shortly, `renameat2` is a newer version of `rename` (and `renameat`) that accepts a flag
to overwrite or not the destination ! So it possible to rename a file only if the destination
doesn't exists, which is exactly what we want ! The only problem is that it's no available anywhere in the standard library ...

Hopefully there's a relatively easy way to call syscall in Python: the [ctypes](https://docs.python.org/3/library/ctypes.html)
library, which allows to call C functions in DLLS and shared libraries.

Which means that with the `ctypes` module, we can easily call function in the C standard library (libc) and get their results !
And the libc library has function wrapper around most syscalls, including the `renameat2` system call !
Witth  just a bit of googling to find documentation around flags, we can call like this:

```
import ctypes
from os import strerror, fsencode

# load the shared librarie libc
libc = ctypes.CDLL("libc.so.6", use_errno=True)

# FLAF used for renameat2 syscall
RENAME_FLAG = 0
NOREPLACE_FLAG = 1
EXCHANGE_FLAG = 2

# This indicates the relative file descriptor if 
# src_path is relative but we use absolute path for simplicity here
_AT_FDCWD = -100

def rename(src_path: str, dst_path: str, flag: int):
    err = libc.renameat2(
        _AT_FDCWD,
        fsencode(src_path),
        _AT_FDCWD,
        fsencode(dst_path),
        linux_flag,
    )


```
But what if the syscall we want ot make is not available in libc ? We can still make a syscall
using the `syscall` function and passing the syscall number ! Here I hardcoded the number for the get_pid
for my laptop, but be aware the syscall number can change depending on your CPU architecture and
you probably don't want to try this without being 100% sure of which syscall you make 

```
import os
import ctypes

libc = ctypes.CDLL("libc.so.6", use_errno=True)

get_pid_syscall_nbr_x86_64 = 39 

pid = libc.syscall(get_pid_syscall_nbr)

print(pid)
print(os.getpid())
```

## Why isn't this in standard lib ?

The `os.rename` function in the standard library could in theory adapted to have the 
flag but according ot this [thread](https://discuss.python.org/t/extending-os-rename-to-support-file-swapping-and-whiteout/22257)
the main reason this is not included seems to be the cross-platform nature of Python, mainly it's not easy to add this
flag in a backward compatible way and have a clean interface for both windows and unix.

## The really easy version

Next post I'll present a bit the small library I created around this: [Atomik](https://github.com/halbow/atomik/tree/main)




